version: 2.1
# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  ruby: circleci/ruby@2.1.3
  browser-tools: circleci/browser-tools@1.4.8
  node-tools: circleci/node@5.2.0

jobs:
  test:
    parallelism: 2
    resource_class: medium
    docker:
      - image: cimg/ruby:3.3.1-node
      - image: postgres:16.1
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circleci_test
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
      # Use circleci/browser-tools instead
      #- image: browserless/chrome:1.59-chrome-stable
      #  environment:
      #    PORT: 3000
      #    CONNECTION_TIMEOUT: 600000
    environment:
      BUNDLE_JOBS: '3'
      BUNDLE_RETRY: '3'
      DATABASE_URL: "postgres://ubuntu@localhost:5432/circleci_test"
      RAILS_ENV: test
      CI: true
      # Override chrome browser path for system test and Puppeteer
      BROWSER_PATH: /usr/bin/google-chrome-stable
      PUPPETEER_SKIP_DOWNLOAD: true
    steps:
      - checkout
      - run:
          name: Glob files to test or stop execution if no file to test
          command: |
            mkdir -p tmp && \
            >tmp/files-to-test.txt && \
            circleci tests glob "test/**/*_test.rb" | circleci tests run --command=">tmp/files-to-test.txt xargs echo" --verbose --split-by=timings
            [ -s tmp/files-to-test.txt ] || circleci-agent step halt #if a re-run and there are no tests to re-run for this parallel run, stop execution
      - browser-tools/install-chrome
      - ruby/install-deps
      - node-tools/install-packages:
          pkg-manager: yarn
      - run:
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
          name: Wait for DB
      # Skip since chrome is ready from browser-tools/install-chrome
      #- run:
      #    command: dockerize -wait http://localhost:3000 -timeout 1m
      #    name: Wait for Chrome
      - run:
          command: bundle exec rails db:test:prepare --trace
          name: Database setup
      - run:
          command: |
            bundle exec rails test --backtrace $(cat tmp/files-to-test.txt)
          name: Run all tests
      - store_test_results:
          path: test/reports
      - store_artifacts:
          path: test/reports/screenshots
          destination: screenshots

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build_and_test:
    jobs:
      - test